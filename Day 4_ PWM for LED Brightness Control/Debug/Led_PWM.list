
Led_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000254c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002724  08002724  00003724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002734  08002734  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002734  08002734  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002734  08002734  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002734  08002734  00003734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002738  08002738  00003738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800273c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002748  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002748  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a119  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000182e  00000000  00000000  0000e155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0000f988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092b  00000000  00000000  00010570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d589  00000000  00000000  00010e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0d2  00000000  00000000  0002e424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2e75  00000000  00000000  0003a4f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd36b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f8  00000000  00000000  000fd3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001005a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800270c 	.word	0x0800270c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800270c 	.word	0x0800270c

08000218 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800021e:	f000 fa12 	bl	8000646 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000222:	f000 f82b 	bl	800027c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000226:	f000 f909 	bl	800043c <MX_GPIO_Init>
	MX_TIM1_Init();
 800022a:	f000 f873 	bl	8000314 <MX_TIM1_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800022e:	2100      	movs	r1, #0
 8000230:	4811      	ldr	r0, [pc, #68]	@ (8000278 <main+0x60>)
 8000232:	f001 fb03 	bl	800183c <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		for (int i = 0; i < 255; i++) {
 8000236:	2300      	movs	r3, #0
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	e009      	b.n	8000250 <main+0x38>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 800023c:	4b0e      	ldr	r3, [pc, #56]	@ (8000278 <main+0x60>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(5);
 8000244:	2005      	movs	r0, #5
 8000246:	f000 fa6f 	bl	8000728 <HAL_Delay>
		for (int i = 0; i < 255; i++) {
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	3301      	adds	r3, #1
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2bfe      	cmp	r3, #254	@ 0xfe
 8000254:	ddf2      	ble.n	800023c <main+0x24>
		}

		for (int i = 255; i > 0; i--) {
 8000256:	23ff      	movs	r3, #255	@ 0xff
 8000258:	603b      	str	r3, [r7, #0]
 800025a:	e009      	b.n	8000270 <main+0x58>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 800025c:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <main+0x60>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	683a      	ldr	r2, [r7, #0]
 8000262:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(5);
 8000264:	2005      	movs	r0, #5
 8000266:	f000 fa5f 	bl	8000728 <HAL_Delay>
		for (int i = 255; i > 0; i--) {
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	3b01      	subs	r3, #1
 800026e:	603b      	str	r3, [r7, #0]
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	dcf2      	bgt.n	800025c <main+0x44>
		for (int i = 0; i < 255; i++) {
 8000276:	e7de      	b.n	8000236 <main+0x1e>
 8000278:	20000028 	.word	0x20000028

0800027c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b094      	sub	sp, #80	@ 0x50
 8000280:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2238      	movs	r2, #56	@ 0x38
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fa12 	bl	80026b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800029e:	2000      	movs	r0, #0
 80002a0:	f000 fcca 	bl	8000c38 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a4:	2302      	movs	r3, #2
 80002a6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002ac:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	2340      	movs	r3, #64	@ 0x40
 80002b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b2:	2302      	movs	r3, #2
 80002b4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b6:	2302      	movs	r3, #2
 80002b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002ba:	2304      	movs	r3, #4
 80002bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80002be:	2355      	movs	r3, #85	@ 0x55
 80002c0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002c2:	2302      	movs	r3, #2
 80002c4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002c6:	2302      	movs	r3, #2
 80002c8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ca:	2302      	movs	r3, #2
 80002cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fd64 	bl	8000da0 <HAL_RCC_OscConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x66>
		Error_Handler();
 80002de:	f000 f8c5 	bl	800046c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002e2:	230f      	movs	r3, #15
 80002e4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e6:	2303      	movs	r3, #3
 80002e8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2104      	movs	r1, #4
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 f862 	bl	80013c4 <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x8e>
		Error_Handler();
 8000306:	f000 f8b1 	bl	800046c <Error_Handler>
	}
}
 800030a:	bf00      	nop
 800030c:	3750      	adds	r7, #80	@ 0x50
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b098      	sub	sp, #96	@ 0x60
 8000318:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800031a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000326:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]
 8000336:	615a      	str	r2, [r3, #20]
 8000338:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2234      	movs	r2, #52	@ 0x34
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f002 f9b7 	bl	80026b4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000346:	4b3b      	ldr	r3, [pc, #236]	@ (8000434 <MX_TIM1_Init+0x120>)
 8000348:	4a3b      	ldr	r2, [pc, #236]	@ (8000438 <MX_TIM1_Init+0x124>)
 800034a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800034c:	4b39      	ldr	r3, [pc, #228]	@ (8000434 <MX_TIM1_Init+0x120>)
 800034e:	2200      	movs	r2, #0
 8000350:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000352:	4b38      	ldr	r3, [pc, #224]	@ (8000434 <MX_TIM1_Init+0x120>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000358:	4b36      	ldr	r3, [pc, #216]	@ (8000434 <MX_TIM1_Init+0x120>)
 800035a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800035e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000360:	4b34      	ldr	r3, [pc, #208]	@ (8000434 <MX_TIM1_Init+0x120>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000366:	4b33      	ldr	r3, [pc, #204]	@ (8000434 <MX_TIM1_Init+0x120>)
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800036c:	4b31      	ldr	r3, [pc, #196]	@ (8000434 <MX_TIM1_Init+0x120>)
 800036e:	2200      	movs	r2, #0
 8000370:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000372:	4830      	ldr	r0, [pc, #192]	@ (8000434 <MX_TIM1_Init+0x120>)
 8000374:	f001 fa0a 	bl	800178c <HAL_TIM_PWM_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM1_Init+0x6e>
		Error_Handler();
 800037e:	f000 f875 	bl	800046c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000382:	2300      	movs	r3, #0
 8000384:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000386:	2300      	movs	r3, #0
 8000388:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800038a:	2300      	movs	r3, #0
 800038c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800038e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000392:	4619      	mov	r1, r3
 8000394:	4827      	ldr	r0, [pc, #156]	@ (8000434 <MX_TIM1_Init+0x120>)
 8000396:	f002 f86b 	bl	8002470 <HAL_TIMEx_MasterConfigSynchronization>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80003a0:	f000 f864 	bl	800046c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a4:	2360      	movs	r3, #96	@ 0x60
 80003a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ac:	2300      	movs	r3, #0
 80003ae:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003b0:	2300      	movs	r3, #0
 80003b2:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003b8:	2300      	movs	r3, #0
 80003ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003bc:	2300      	movs	r3, #0
 80003be:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80003c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003c4:	2200      	movs	r2, #0
 80003c6:	4619      	mov	r1, r3
 80003c8:	481a      	ldr	r0, [pc, #104]	@ (8000434 <MX_TIM1_Init+0x120>)
 80003ca:	f001 fb43 	bl	8001a54 <HAL_TIM_PWM_ConfigChannel>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80003d4:	f000 f84a 	bl	800046c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003d8:	2300      	movs	r3, #0
 80003da:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003dc:	2300      	movs	r3, #0
 80003de:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003f0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80003f6:	2300      	movs	r3, #0
 80003f8:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003fa:	2300      	movs	r3, #0
 80003fc:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000402:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000408:	2300      	movs	r3, #0
 800040a:	633b      	str	r3, [r7, #48]	@ 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800040c:	2300      	movs	r3, #0
 800040e:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	4619      	mov	r1, r3
 8000414:	4807      	ldr	r0, [pc, #28]	@ (8000434 <MX_TIM1_Init+0x120>)
 8000416:	f002 f8b9 	bl	800258c <HAL_TIMEx_ConfigBreakDeadTime>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM1_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8000420:	f000 f824 	bl	800046c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <MX_TIM1_Init+0x120>)
 8000426:	f000 f86b 	bl	8000500 <HAL_TIM_MspPostInit>

}
 800042a:	bf00      	nop
 800042c:	3760      	adds	r7, #96	@ 0x60
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000028 	.word	0x20000028
 8000438:	40012c00 	.word	0x40012c00

0800043c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <MX_GPIO_Init+0x2c>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000446:	4a08      	ldr	r2, [pc, #32]	@ (8000468 <MX_GPIO_Init+0x2c>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800044e:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <MX_GPIO_Init+0x2c>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <Error_Handler+0x8>

08000478 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <HAL_MspInit+0x44>)
 8000480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000482:	4a0e      	ldr	r2, [pc, #56]	@ (80004bc <HAL_MspInit+0x44>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6613      	str	r3, [r2, #96]	@ 0x60
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <HAL_MspInit+0x44>)
 800048c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <HAL_MspInit+0x44>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049a:	4a08      	ldr	r2, [pc, #32]	@ (80004bc <HAL_MspInit+0x44>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80004a2:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <HAL_MspInit+0x44>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004ae:	f000 fc67 	bl	8000d80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0a      	ldr	r2, [pc, #40]	@ (80004f8 <HAL_TIM_PWM_MspInit+0x38>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d10b      	bne.n	80004ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80004d2:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <HAL_TIM_PWM_MspInit+0x3c>)
 80004d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004d6:	4a09      	ldr	r2, [pc, #36]	@ (80004fc <HAL_TIM_PWM_MspInit+0x3c>)
 80004d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80004de:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <HAL_TIM_PWM_MspInit+0x3c>)
 80004e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40012c00 	.word	0x40012c00
 80004fc:	40021000 	.word	0x40021000

08000500 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a12      	ldr	r2, [pc, #72]	@ (8000568 <HAL_TIM_MspPostInit+0x68>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d11d      	bne.n	800055e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b12      	ldr	r3, [pc, #72]	@ (800056c <HAL_TIM_MspPostInit+0x6c>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a11      	ldr	r2, [pc, #68]	@ (800056c <HAL_TIM_MspPostInit+0x6c>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <HAL_TIM_MspPostInit+0x6c>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800053a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800053e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000540:	2302      	movs	r3, #2
 8000542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800054c:	2306      	movs	r3, #6
 800054e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800055a:	f000 f9eb 	bl	8000934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800055e:	bf00      	nop
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40012c00 	.word	0x40012c00
 800056c:	40021000 	.word	0x40021000

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <NMI_Handler+0x4>

08000578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <HardFault_Handler+0x4>

08000580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <MemManage_Handler+0x4>

08000588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <BusFault_Handler+0x4>

08000590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <UsageFault_Handler+0x4>

08000598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c6:	f000 f891 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <SystemInit+0x20>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005da:	4a05      	ldr	r2, [pc, #20]	@ (80005f0 <SystemInit+0x20>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f8:	f7ff ffea 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	@ (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	@ (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	@ (8000638 <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	@ (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000622:	f002 f84f 	bl	80026c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000626:	f7ff fdf7 	bl	8000218 <main>

0800062a <LoopForever>:

LoopForever:
    b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   r0, =_estack
 800062c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000638:	0800273c 	.word	0x0800273c
  ldr r2, =_sbss
 800063c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000640:	20000078 	.word	0x20000078

08000644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC1_2_IRQHandler>

08000646 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800064c:	2300      	movs	r3, #0
 800064e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000650:	2003      	movs	r0, #3
 8000652:	f000 f93d 	bl	80008d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f80e 	bl	8000678 <HAL_InitTick>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d002      	beq.n	8000668 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	e001      	b.n	800066c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000668:	f7ff ff06 	bl	8000478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800066c:	79fb      	ldrb	r3, [r7, #7]

}
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000684:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <HAL_InitTick+0x68>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d022      	beq.n	80006d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <HAL_InitTick+0x6c>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <HAL_InitTick+0x68>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000698:	fbb1 f3f3 	udiv	r3, r1, r3
 800069c:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f93a 	bl	800091a <HAL_SYSTICK_Config>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d10f      	bne.n	80006cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b0f      	cmp	r3, #15
 80006b0:	d809      	bhi.n	80006c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b2:	2200      	movs	r2, #0
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ba:	f000 f914 	bl	80008e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006be:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <HAL_InitTick+0x70>)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	e007      	b.n	80006d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	e004      	b.n	80006d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006cc:	2301      	movs	r3, #1
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e001      	b.n	80006d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000008 	.word	0x20000008
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_IncTick+0x1c>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b05      	ldr	r3, [pc, #20]	@ (800070c <HAL_IncTick+0x20>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4413      	add	r3, r2
 80006fa:	4a03      	ldr	r2, [pc, #12]	@ (8000708 <HAL_IncTick+0x1c>)
 80006fc:	6013      	str	r3, [r2, #0]
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	20000074 	.word	0x20000074
 800070c:	20000008 	.word	0x20000008

08000710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return uwTick;
 8000714:	4b03      	ldr	r3, [pc, #12]	@ (8000724 <HAL_GetTick+0x14>)
 8000716:	681b      	ldr	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000074 	.word	0x20000074

08000728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000730:	f7ff ffee 	bl	8000710 <HAL_GetTick>
 8000734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000740:	d004      	beq.n	800074c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <HAL_Delay+0x40>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800074c:	bf00      	nop
 800074e:	f7ff ffdf 	bl	8000710 <HAL_GetTick>
 8000752:	4602      	mov	r2, r0
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	429a      	cmp	r2, r3
 800075c:	d8f7      	bhi.n	800074e <HAL_Delay+0x26>
  {
  }
}
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000008 	.word	0x20000008

0800076c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800079c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079e:	4a04      	ldr	r2, [pc, #16]	@ (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	60d3      	str	r3, [r2, #12]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b8:	4b04      	ldr	r3, [pc, #16]	@ (80007cc <__NVIC_GetPriorityGrouping+0x18>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	f003 0307 	and.w	r3, r3, #7
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	@ (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	@ (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0112      	lsls	r2, r2, #4
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	@ 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f1c3 0307 	rsb	r3, r3, #7
 800083e:	2b04      	cmp	r3, #4
 8000840:	bf28      	it	cs
 8000842:	2304      	movcs	r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3304      	adds	r3, #4
 800084a:	2b06      	cmp	r3, #6
 800084c:	d902      	bls.n	8000854 <NVIC_EncodePriority+0x30>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3b03      	subs	r3, #3
 8000852:	e000      	b.n	8000856 <NVIC_EncodePriority+0x32>
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43da      	mvns	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	401a      	ands	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43d9      	mvns	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	4313      	orrs	r3, r2
         );
}
 800087e:	4618      	mov	r0, r3
 8000880:	3724      	adds	r7, #36	@ 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800089c:	d301      	bcc.n	80008a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089e:	2301      	movs	r3, #1
 80008a0:	e00f      	b.n	80008c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a2:	4a0a      	ldr	r2, [pc, #40]	@ (80008cc <SysTick_Config+0x40>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008aa:	210f      	movs	r1, #15
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f7ff ff8e 	bl	80007d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b4:	4b05      	ldr	r3, [pc, #20]	@ (80008cc <SysTick_Config+0x40>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ba:	4b04      	ldr	r3, [pc, #16]	@ (80008cc <SysTick_Config+0x40>)
 80008bc:	2207      	movs	r2, #7
 80008be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	e000e010 	.word	0xe000e010

080008d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff ff47 	bl	800076c <__NVIC_SetPriorityGrouping>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b086      	sub	sp, #24
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
 80008f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008f4:	f7ff ff5e 	bl	80007b4 <__NVIC_GetPriorityGrouping>
 80008f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f7ff ff90 	bl	8000824 <NVIC_EncodePriority>
 8000904:	4602      	mov	r2, r0
 8000906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff5f 	bl	80007d0 <__NVIC_SetPriority>
}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ffb2 	bl	800088c <SysTick_Config>
 8000928:	4603      	mov	r3, r0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000934:	b480      	push	{r7}
 8000936:	b087      	sub	sp, #28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000942:	e15a      	b.n	8000bfa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	2101      	movs	r1, #1
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b00      	cmp	r3, #0
 8000958:	f000 814c 	beq.w	8000bf4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f003 0303 	and.w	r3, r3, #3
 8000964:	2b01      	cmp	r3, #1
 8000966:	d005      	beq.n	8000974 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000970:	2b02      	cmp	r3, #2
 8000972:	d130      	bne.n	80009d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4013      	ands	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68da      	ldr	r2, [r3, #12]
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4313      	orrs	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009aa:	2201      	movs	r2, #1
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	091b      	lsrs	r3, r3, #4
 80009c0:	f003 0201 	and.w	r2, r3, #1
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f003 0303 	and.w	r3, r3, #3
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d017      	beq.n	8000a12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	2203      	movs	r2, #3
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d123      	bne.n	8000a66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	08da      	lsrs	r2, r3, #3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3208      	adds	r2, #8
 8000a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	220f      	movs	r2, #15
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	691a      	ldr	r2, [r3, #16]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	f003 0307 	and.w	r3, r3, #7
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	08da      	lsrs	r2, r3, #3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3208      	adds	r2, #8
 8000a60:	6939      	ldr	r1, [r7, #16]
 8000a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	2203      	movs	r2, #3
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43db      	mvns	r3, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f003 0203 	and.w	r2, r3, #3
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 80a6 	beq.w	8000bf4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa8:	4b5b      	ldr	r3, [pc, #364]	@ (8000c18 <HAL_GPIO_Init+0x2e4>)
 8000aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aac:	4a5a      	ldr	r2, [pc, #360]	@ (8000c18 <HAL_GPIO_Init+0x2e4>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ab4:	4b58      	ldr	r3, [pc, #352]	@ (8000c18 <HAL_GPIO_Init+0x2e4>)
 8000ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ac0:	4a56      	ldr	r2, [pc, #344]	@ (8000c1c <HAL_GPIO_Init+0x2e8>)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	089b      	lsrs	r3, r3, #2
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	220f      	movs	r2, #15
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000aea:	d01f      	beq.n	8000b2c <HAL_GPIO_Init+0x1f8>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a4c      	ldr	r2, [pc, #304]	@ (8000c20 <HAL_GPIO_Init+0x2ec>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d019      	beq.n	8000b28 <HAL_GPIO_Init+0x1f4>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a4b      	ldr	r2, [pc, #300]	@ (8000c24 <HAL_GPIO_Init+0x2f0>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d013      	beq.n	8000b24 <HAL_GPIO_Init+0x1f0>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a4a      	ldr	r2, [pc, #296]	@ (8000c28 <HAL_GPIO_Init+0x2f4>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d00d      	beq.n	8000b20 <HAL_GPIO_Init+0x1ec>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a49      	ldr	r2, [pc, #292]	@ (8000c2c <HAL_GPIO_Init+0x2f8>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d007      	beq.n	8000b1c <HAL_GPIO_Init+0x1e8>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a48      	ldr	r2, [pc, #288]	@ (8000c30 <HAL_GPIO_Init+0x2fc>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d101      	bne.n	8000b18 <HAL_GPIO_Init+0x1e4>
 8000b14:	2305      	movs	r3, #5
 8000b16:	e00a      	b.n	8000b2e <HAL_GPIO_Init+0x1fa>
 8000b18:	2306      	movs	r3, #6
 8000b1a:	e008      	b.n	8000b2e <HAL_GPIO_Init+0x1fa>
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	e006      	b.n	8000b2e <HAL_GPIO_Init+0x1fa>
 8000b20:	2303      	movs	r3, #3
 8000b22:	e004      	b.n	8000b2e <HAL_GPIO_Init+0x1fa>
 8000b24:	2302      	movs	r3, #2
 8000b26:	e002      	b.n	8000b2e <HAL_GPIO_Init+0x1fa>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e000      	b.n	8000b2e <HAL_GPIO_Init+0x1fa>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	f002 0203 	and.w	r2, r2, #3
 8000b34:	0092      	lsls	r2, r2, #2
 8000b36:	4093      	lsls	r3, r2
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b3e:	4937      	ldr	r1, [pc, #220]	@ (8000c1c <HAL_GPIO_Init+0x2e8>)
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	3302      	adds	r3, #2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b4c:	4b39      	ldr	r3, [pc, #228]	@ (8000c34 <HAL_GPIO_Init+0x300>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b70:	4a30      	ldr	r2, [pc, #192]	@ (8000c34 <HAL_GPIO_Init+0x300>)
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b76:	4b2f      	ldr	r3, [pc, #188]	@ (8000c34 <HAL_GPIO_Init+0x300>)
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b9a:	4a26      	ldr	r2, [pc, #152]	@ (8000c34 <HAL_GPIO_Init+0x300>)
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000ba0:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <HAL_GPIO_Init+0x300>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <HAL_GPIO_Init+0x300>)
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_GPIO_Init+0x300>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bee:	4a11      	ldr	r2, [pc, #68]	@ (8000c34 <HAL_GPIO_Init+0x300>)
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	fa22 f303 	lsr.w	r3, r2, r3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f47f ae9d 	bne.w	8000944 <HAL_GPIO_Init+0x10>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	371c      	adds	r7, #28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010000 	.word	0x40010000
 8000c20:	48000400 	.word	0x48000400
 8000c24:	48000800 	.word	0x48000800
 8000c28:	48000c00 	.word	0x48000c00
 8000c2c:	48001000 	.word	0x48001000
 8000c30:	48001400 	.word	0x48001400
 8000c34:	40010400 	.word	0x40010400

08000c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d141      	bne.n	8000cca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c46:	4b4b      	ldr	r3, [pc, #300]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c52:	d131      	bne.n	8000cb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c54:	4b47      	ldr	r3, [pc, #284]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c5a:	4a46      	ldr	r2, [pc, #280]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c64:	4b43      	ldr	r3, [pc, #268]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c6c:	4a41      	ldr	r2, [pc, #260]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c74:	4b40      	ldr	r3, [pc, #256]	@ (8000d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2232      	movs	r2, #50	@ 0x32
 8000c7a:	fb02 f303 	mul.w	r3, r2, r3
 8000c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c80:	fba2 2303 	umull	r2, r3, r2, r3
 8000c84:	0c9b      	lsrs	r3, r3, #18
 8000c86:	3301      	adds	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c8a:	e002      	b.n	8000c92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c92:	4b38      	ldr	r3, [pc, #224]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c9e:	d102      	bne.n	8000ca6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f2      	bne.n	8000c8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ca6:	4b33      	ldr	r3, [pc, #204]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cb2:	d158      	bne.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e057      	b.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000cc8:	e04d      	b.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cd0:	d141      	bne.n	8000d56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cd2:	4b28      	ldr	r3, [pc, #160]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cde:	d131      	bne.n	8000d44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ce0:	4b24      	ldr	r3, [pc, #144]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ce6:	4a23      	ldr	r2, [pc, #140]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf0:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2232      	movs	r2, #50	@ 0x32
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d10:	0c9b      	lsrs	r3, r3, #18
 8000d12:	3301      	adds	r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d16:	e002      	b.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d2a:	d102      	bne.n	8000d32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f2      	bne.n	8000d18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d3e:	d112      	bne.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e011      	b.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d44:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d54:	e007      	b.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40007000 	.word	0x40007000
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	431bde83 	.word	0x431bde83

08000d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d8e:	6093      	str	r3, [r2, #8]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40007000 	.word	0x40007000

08000da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e2fe      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d075      	beq.n	8000eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dbe:	4b97      	ldr	r3, [pc, #604]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 030c 	and.w	r3, r3, #12
 8000dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dc8:	4b94      	ldr	r3, [pc, #592]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	2b0c      	cmp	r3, #12
 8000dd6:	d102      	bne.n	8000dde <HAL_RCC_OscConfig+0x3e>
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d002      	beq.n	8000de4 <HAL_RCC_OscConfig+0x44>
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	d10b      	bne.n	8000dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de4:	4b8d      	ldr	r3, [pc, #564]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d05b      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x108>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d157      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e2d9      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e04:	d106      	bne.n	8000e14 <HAL_RCC_OscConfig+0x74>
 8000e06:	4b85      	ldr	r3, [pc, #532]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a84      	ldr	r2, [pc, #528]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e01d      	b.n	8000e50 <HAL_RCC_OscConfig+0xb0>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e1c:	d10c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x98>
 8000e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a7e      	ldr	r2, [pc, #504]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a7b      	ldr	r2, [pc, #492]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e00b      	b.n	8000e50 <HAL_RCC_OscConfig+0xb0>
 8000e38:	4b78      	ldr	r3, [pc, #480]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a77      	ldr	r2, [pc, #476]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b75      	ldr	r3, [pc, #468]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a74      	ldr	r2, [pc, #464]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d013      	beq.n	8000e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e58:	f7ff fc5a 	bl	8000710 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fc56 	bl	8000710 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	@ 0x64
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e29e      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e72:	4b6a      	ldr	r3, [pc, #424]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f0      	beq.n	8000e60 <HAL_RCC_OscConfig+0xc0>
 8000e7e:	e014      	b.n	8000eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e80:	f7ff fc46 	bl	8000710 <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e88:	f7ff fc42 	bl	8000710 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b64      	cmp	r3, #100	@ 0x64
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e28a      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e9a:	4b60      	ldr	r3, [pc, #384]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f0      	bne.n	8000e88 <HAL_RCC_OscConfig+0xe8>
 8000ea6:	e000      	b.n	8000eaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d075      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb6:	4b59      	ldr	r3, [pc, #356]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ec0:	4b56      	ldr	r3, [pc, #344]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	2b0c      	cmp	r3, #12
 8000ece:	d102      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x136>
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d002      	beq.n	8000edc <HAL_RCC_OscConfig+0x13c>
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d11f      	bne.n	8000f1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000edc:	4b4f      	ldr	r3, [pc, #316]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x154>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e25d      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef4:	4b49      	ldr	r3, [pc, #292]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	061b      	lsls	r3, r3, #24
 8000f02:	4946      	ldr	r1, [pc, #280]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f08:	4b45      	ldr	r3, [pc, #276]	@ (8001020 <HAL_RCC_OscConfig+0x280>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fbb3 	bl	8000678 <HAL_InitTick>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d043      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e249      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d023      	beq.n	8000f6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f24:	4b3d      	ldr	r3, [pc, #244]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a3c      	ldr	r2, [pc, #240]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fbee 	bl	8000710 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f38:	f7ff fbea 	bl	8000710 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e232      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f4a:	4b34      	ldr	r3, [pc, #208]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f56:	4b31      	ldr	r3, [pc, #196]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	061b      	lsls	r3, r3, #24
 8000f64:	492d      	ldr	r1, [pc, #180]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	604b      	str	r3, [r1, #4]
 8000f6a:	e01a      	b.n	8000fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a2a      	ldr	r2, [pc, #168]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f78:	f7ff fbca 	bl	8000710 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f80:	f7ff fbc6 	bl	8000710 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e20e      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f92:	4b22      	ldr	r3, [pc, #136]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f0      	bne.n	8000f80 <HAL_RCC_OscConfig+0x1e0>
 8000f9e:	e000      	b.n	8000fa2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d041      	beq.n	8001032 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d01c      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fbc:	4a17      	ldr	r2, [pc, #92]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fba3 	bl	8000710 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fce:	f7ff fb9f 	bl	8000710 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e1e7      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0ef      	beq.n	8000fce <HAL_RCC_OscConfig+0x22e>
 8000fee:	e020      	b.n	8001032 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ff6:	4a09      	ldr	r2, [pc, #36]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001000:	f7ff fb86 	bl	8000710 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001006:	e00d      	b.n	8001024 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001008:	f7ff fb82 	bl	8000710 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d906      	bls.n	8001024 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1ca      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001024:	4b8c      	ldr	r3, [pc, #560]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1ea      	bne.n	8001008 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 80a6 	beq.w	800118c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001044:	4b84      	ldr	r3, [pc, #528]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_RCC_OscConfig+0x2b4>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x2b6>
 8001054:	2300      	movs	r3, #0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00d      	beq.n	8001076 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b7f      	ldr	r3, [pc, #508]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	4a7e      	ldr	r2, [pc, #504]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001064:	6593      	str	r3, [r2, #88]	@ 0x58
 8001066:	4b7c      	ldr	r3, [pc, #496]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001072:	2301      	movs	r3, #1
 8001074:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001076:	4b79      	ldr	r3, [pc, #484]	@ (800125c <HAL_RCC_OscConfig+0x4bc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800107e:	2b00      	cmp	r3, #0
 8001080:	d118      	bne.n	80010b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001082:	4b76      	ldr	r3, [pc, #472]	@ (800125c <HAL_RCC_OscConfig+0x4bc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a75      	ldr	r2, [pc, #468]	@ (800125c <HAL_RCC_OscConfig+0x4bc>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108e:	f7ff fb3f 	bl	8000710 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001096:	f7ff fb3b 	bl	8000710 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e183      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a8:	4b6c      	ldr	r3, [pc, #432]	@ (800125c <HAL_RCC_OscConfig+0x4bc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d108      	bne.n	80010ce <HAL_RCC_OscConfig+0x32e>
 80010bc:	4b66      	ldr	r3, [pc, #408]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010c2:	4a65      	ldr	r2, [pc, #404]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010cc:	e024      	b.n	8001118 <HAL_RCC_OscConfig+0x378>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d110      	bne.n	80010f8 <HAL_RCC_OscConfig+0x358>
 80010d6:	4b60      	ldr	r3, [pc, #384]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010dc:	4a5e      	ldr	r2, [pc, #376]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010ec:	4a5a      	ldr	r2, [pc, #360]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010f6:	e00f      	b.n	8001118 <HAL_RCC_OscConfig+0x378>
 80010f8:	4b57      	ldr	r3, [pc, #348]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010fe:	4a56      	ldr	r2, [pc, #344]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001108:	4b53      	ldr	r3, [pc, #332]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 800110a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800110e:	4a52      	ldr	r2, [pc, #328]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001110:	f023 0304 	bic.w	r3, r3, #4
 8001114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d016      	beq.n	800114e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001120:	f7ff faf6 	bl	8000710 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001126:	e00a      	b.n	800113e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001128:	f7ff faf2 	bl	8000710 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001136:	4293      	cmp	r3, r2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e138      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800113e:	4b46      	ldr	r3, [pc, #280]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0ed      	beq.n	8001128 <HAL_RCC_OscConfig+0x388>
 800114c:	e015      	b.n	800117a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114e:	f7ff fadf 	bl	8000710 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001156:	f7ff fadb 	bl	8000710 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e121      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800116c:	4b3a      	ldr	r3, [pc, #232]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 800116e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1ed      	bne.n	8001156 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800117a:	7ffb      	ldrb	r3, [r7, #31]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001180:	4b35      	ldr	r3, [pc, #212]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001184:	4a34      	ldr	r2, [pc, #208]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800118a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0320 	and.w	r3, r3, #32
 8001194:	2b00      	cmp	r3, #0
 8001196:	d03c      	beq.n	8001212 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d01c      	beq.n	80011da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b0:	f7ff faae 	bl	8000710 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011b8:	f7ff faaa 	bl	8000710 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e0f2      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ca:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0ef      	beq.n	80011b8 <HAL_RCC_OscConfig+0x418>
 80011d8:	e01b      	b.n	8001212 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011e2:	f023 0301 	bic.w	r3, r3, #1
 80011e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ea:	f7ff fa91 	bl	8000710 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f2:	f7ff fa8d 	bl	8000710 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0d5      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1ef      	bne.n	80011f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80c9 	beq.w	80013ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b0c      	cmp	r3, #12
 8001226:	f000 8083 	beq.w	8001330 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d15e      	bne.n	80012f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001238:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800123c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff fa67 	bl	8000710 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001244:	e00c      	b.n	8001260 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fa63 	bl	8000710 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d905      	bls.n	8001260 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e0ab      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
 8001258:	40021000 	.word	0x40021000
 800125c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001260:	4b55      	ldr	r3, [pc, #340]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1ec      	bne.n	8001246 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800126c:	4b52      	ldr	r3, [pc, #328]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	4b52      	ldr	r3, [pc, #328]	@ (80013bc <HAL_RCC_OscConfig+0x61c>)
 8001272:	4013      	ands	r3, r2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6a11      	ldr	r1, [r2, #32]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800127c:	3a01      	subs	r2, #1
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	4311      	orrs	r1, r2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001286:	0212      	lsls	r2, r2, #8
 8001288:	4311      	orrs	r1, r2
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800128e:	0852      	lsrs	r2, r2, #1
 8001290:	3a01      	subs	r2, #1
 8001292:	0552      	lsls	r2, r2, #21
 8001294:	4311      	orrs	r1, r2
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800129a:	0852      	lsrs	r2, r2, #1
 800129c:	3a01      	subs	r2, #1
 800129e:	0652      	lsls	r2, r2, #25
 80012a0:	4311      	orrs	r1, r2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80012a6:	06d2      	lsls	r2, r2, #27
 80012a8:	430a      	orrs	r2, r1
 80012aa:	4943      	ldr	r1, [pc, #268]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012b0:	4b41      	ldr	r3, [pc, #260]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a40      	ldr	r2, [pc, #256]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012bc:	4b3e      	ldr	r3, [pc, #248]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4a3d      	ldr	r2, [pc, #244]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fa22 	bl	8000710 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d0:	f7ff fa1e 	bl	8000710 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e066      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012e2:	4b35      	ldr	r3, [pc, #212]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x530>
 80012ee:	e05e      	b.n	80013ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f0:	4b31      	ldr	r3, [pc, #196]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a30      	ldr	r2, [pc, #192]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fa08 	bl	8000710 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001304:	f7ff fa04 	bl	8000710 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e04c      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001316:	4b28      	ldr	r3, [pc, #160]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001322:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	4924      	ldr	r1, [pc, #144]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 8001328:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <HAL_RCC_OscConfig+0x620>)
 800132a:	4013      	ands	r3, r2
 800132c:	60cb      	str	r3, [r1, #12]
 800132e:	e03e      	b.n	80013ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e039      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800133c:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	429a      	cmp	r2, r3
 800134e:	d12c      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135a:	3b01      	subs	r3, #1
 800135c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d123      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800136e:	429a      	cmp	r2, r3
 8001370:	d11b      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800137e:	429a      	cmp	r2, r3
 8001380:	d113      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	3b01      	subs	r3, #1
 8001390:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001392:	429a      	cmp	r2, r3
 8001394:	d109      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	3b01      	subs	r3, #1
 80013a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d001      	beq.n	80013ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	019f800c 	.word	0x019f800c
 80013c0:	feeefffc 	.word	0xfeeefffc

080013c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e11e      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4b91      	ldr	r3, [pc, #580]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d910      	bls.n	800140c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b8e      	ldr	r3, [pc, #568]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 020f 	bic.w	r2, r3, #15
 80013f2:	498c      	ldr	r1, [pc, #560]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b8a      	ldr	r3, [pc, #552]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e106      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d073      	beq.n	8001500 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d129      	bne.n	8001474 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001420:	4b81      	ldr	r3, [pc, #516]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0f4      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001430:	f000 f966 	bl	8001700 <RCC_GetSysClockFreqFromPLLSource>
 8001434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4a7c      	ldr	r2, [pc, #496]	@ (800162c <HAL_RCC_ClockConfig+0x268>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d93f      	bls.n	80014be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800143e:	4b7a      	ldr	r3, [pc, #488]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d009      	beq.n	800145e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001452:	2b00      	cmp	r3, #0
 8001454:	d033      	beq.n	80014be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800145a:	2b00      	cmp	r3, #0
 800145c:	d12f      	bne.n	80014be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800145e:	4b72      	ldr	r3, [pc, #456]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001466:	4a70      	ldr	r2, [pc, #448]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800146c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e024      	b.n	80014be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d107      	bne.n	800148c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147c:	4b6a      	ldr	r3, [pc, #424]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0c6      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800148c:	4b66      	ldr	r3, [pc, #408]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0be      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800149c:	f000 f8ce 	bl	800163c <HAL_RCC_GetSysClockFreq>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4a61      	ldr	r2, [pc, #388]	@ (800162c <HAL_RCC_ClockConfig+0x268>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d909      	bls.n	80014be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014b2:	4a5d      	ldr	r2, [pc, #372]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80014ba:	2380      	movs	r3, #128	@ 0x80
 80014bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014be:	4b5a      	ldr	r3, [pc, #360]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f023 0203 	bic.w	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4957      	ldr	r1, [pc, #348]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014d0:	f7ff f91e 	bl	8000710 <HAL_GetTick>
 80014d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	e00a      	b.n	80014ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d8:	f7ff f91a 	bl	8000710 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e095      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 020c 	and.w	r2, r3, #12
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d1eb      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d023      	beq.n	8001554 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001518:	4b43      	ldr	r3, [pc, #268]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4a42      	ldr	r2, [pc, #264]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800151e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001522:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001530:	4b3d      	ldr	r3, [pc, #244]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001538:	4a3b      	ldr	r2, [pc, #236]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800153a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800153e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001540:	4b39      	ldr	r3, [pc, #228]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4936      	ldr	r1, [pc, #216]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
 8001552:	e008      	b.n	8001566 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b80      	cmp	r3, #128	@ 0x80
 8001558:	d105      	bne.n	8001566 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800155a:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	4a32      	ldr	r2, [pc, #200]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001560:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001564:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001566:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d21d      	bcs.n	80015b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001574:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 020f 	bic.w	r2, r3, #15
 800157c:	4929      	ldr	r1, [pc, #164]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001584:	f7ff f8c4 	bl	8000710 <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158c:	f7ff f8c0 	bl	8000710 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e03b      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d1ed      	bne.n	800158c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4917      	ldr	r1, [pc, #92]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	490f      	ldr	r1, [pc, #60]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ee:	f000 f825 	bl	800163c <HAL_RCC_GetSysClockFreq>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	490c      	ldr	r1, [pc, #48]	@ (8001630 <HAL_RCC_ClockConfig+0x26c>)
 8001600:	5ccb      	ldrb	r3, [r1, r3]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <HAL_RCC_ClockConfig+0x270>)
 800160c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800160e:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <HAL_RCC_ClockConfig+0x274>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff f830 	bl	8000678 <HAL_InitTick>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000
 8001628:	40021000 	.word	0x40021000
 800162c:	04c4b400 	.word	0x04c4b400
 8001630:	08002724 	.word	0x08002724
 8001634:	20000000 	.word	0x20000000
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001642:	4b2c      	ldr	r3, [pc, #176]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b04      	cmp	r3, #4
 800164c:	d102      	bne.n	8001654 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800164e:	4b2a      	ldr	r3, [pc, #168]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	e047      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001654:	4b27      	ldr	r3, [pc, #156]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b08      	cmp	r3, #8
 800165e:	d102      	bne.n	8001666 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001660:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	e03e      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001666:	4b23      	ldr	r3, [pc, #140]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d136      	bne.n	80016e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001672:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	3301      	adds	r3, #1
 8001688:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2b03      	cmp	r3, #3
 800168e:	d10c      	bne.n	80016aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001690:	4a1a      	ldr	r2, [pc, #104]	@ (80016fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	fbb2 f3f3 	udiv	r3, r2, r3
 8001698:	4a16      	ldr	r2, [pc, #88]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800169a:	68d2      	ldr	r2, [r2, #12]
 800169c:	0a12      	lsrs	r2, r2, #8
 800169e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
      break;
 80016a8:	e00c      	b.n	80016c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016aa:	4a13      	ldr	r2, [pc, #76]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4a10      	ldr	r2, [pc, #64]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016b4:	68d2      	ldr	r2, [r2, #12]
 80016b6:	0a12      	lsrs	r2, r2, #8
 80016b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
      break;
 80016c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016c4:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0e5b      	lsrs	r3, r3, #25
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	3301      	adds	r3, #1
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	e001      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80016e4:	693b      	ldr	r3, [r7, #16]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	00f42400 	.word	0x00f42400
 80016fc:	016e3600 	.word	0x016e3600

08001700 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001706:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3301      	adds	r3, #1
 800171c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d10c      	bne.n	800173e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001724:	4a17      	ldr	r2, [pc, #92]	@ (8001784 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800172e:	68d2      	ldr	r2, [r2, #12]
 8001730:	0a12      	lsrs	r2, r2, #8
 8001732:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
    break;
 800173c:	e00c      	b.n	8001758 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800173e:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4a0e      	ldr	r2, [pc, #56]	@ (8001780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001748:	68d2      	ldr	r2, [r2, #12]
 800174a:	0a12      	lsrs	r2, r2, #8
 800174c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
    break;
 8001756:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0e5b      	lsrs	r3, r3, #25
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	3301      	adds	r3, #1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001772:	687b      	ldr	r3, [r7, #4]
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	40021000 	.word	0x40021000
 8001784:	016e3600 	.word	0x016e3600
 8001788:	00f42400 	.word	0x00f42400

0800178c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e049      	b.n	8001832 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d106      	bne.n	80017b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7fe fe84 	bl	80004c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3304      	adds	r3, #4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f000 fa56 	bl	8001c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d109      	bne.n	8001860 <HAL_TIM_PWM_Start+0x24>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b01      	cmp	r3, #1
 8001856:	bf14      	ite	ne
 8001858:	2301      	movne	r3, #1
 800185a:	2300      	moveq	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	e03c      	b.n	80018da <HAL_TIM_PWM_Start+0x9e>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2b04      	cmp	r3, #4
 8001864:	d109      	bne.n	800187a <HAL_TIM_PWM_Start+0x3e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b01      	cmp	r3, #1
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	e02f      	b.n	80018da <HAL_TIM_PWM_Start+0x9e>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d109      	bne.n	8001894 <HAL_TIM_PWM_Start+0x58>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b01      	cmp	r3, #1
 800188a:	bf14      	ite	ne
 800188c:	2301      	movne	r3, #1
 800188e:	2300      	moveq	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	e022      	b.n	80018da <HAL_TIM_PWM_Start+0x9e>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d109      	bne.n	80018ae <HAL_TIM_PWM_Start+0x72>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	bf14      	ite	ne
 80018a6:	2301      	movne	r3, #1
 80018a8:	2300      	moveq	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	e015      	b.n	80018da <HAL_TIM_PWM_Start+0x9e>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2b10      	cmp	r3, #16
 80018b2:	d109      	bne.n	80018c8 <HAL_TIM_PWM_Start+0x8c>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	bf14      	ite	ne
 80018c0:	2301      	movne	r3, #1
 80018c2:	2300      	moveq	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	e008      	b.n	80018da <HAL_TIM_PWM_Start+0x9e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0a1      	b.n	8001a26 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d104      	bne.n	80018f2 <HAL_TIM_PWM_Start+0xb6>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018f0:	e023      	b.n	800193a <HAL_TIM_PWM_Start+0xfe>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d104      	bne.n	8001902 <HAL_TIM_PWM_Start+0xc6>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001900:	e01b      	b.n	800193a <HAL_TIM_PWM_Start+0xfe>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2b08      	cmp	r3, #8
 8001906:	d104      	bne.n	8001912 <HAL_TIM_PWM_Start+0xd6>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001910:	e013      	b.n	800193a <HAL_TIM_PWM_Start+0xfe>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d104      	bne.n	8001922 <HAL_TIM_PWM_Start+0xe6>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001920:	e00b      	b.n	800193a <HAL_TIM_PWM_Start+0xfe>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b10      	cmp	r3, #16
 8001926:	d104      	bne.n	8001932 <HAL_TIM_PWM_Start+0xf6>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001930:	e003      	b.n	800193a <HAL_TIM_PWM_Start+0xfe>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2202      	movs	r2, #2
 8001936:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2201      	movs	r2, #1
 8001940:	6839      	ldr	r1, [r7, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fd6e 	bl	8002424 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a38      	ldr	r2, [pc, #224]	@ (8001a30 <HAL_TIM_PWM_Start+0x1f4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d018      	beq.n	8001984 <HAL_TIM_PWM_Start+0x148>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a37      	ldr	r2, [pc, #220]	@ (8001a34 <HAL_TIM_PWM_Start+0x1f8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d013      	beq.n	8001984 <HAL_TIM_PWM_Start+0x148>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a35      	ldr	r2, [pc, #212]	@ (8001a38 <HAL_TIM_PWM_Start+0x1fc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00e      	beq.n	8001984 <HAL_TIM_PWM_Start+0x148>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a34      	ldr	r2, [pc, #208]	@ (8001a3c <HAL_TIM_PWM_Start+0x200>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d009      	beq.n	8001984 <HAL_TIM_PWM_Start+0x148>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a32      	ldr	r2, [pc, #200]	@ (8001a40 <HAL_TIM_PWM_Start+0x204>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d004      	beq.n	8001984 <HAL_TIM_PWM_Start+0x148>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a31      	ldr	r2, [pc, #196]	@ (8001a44 <HAL_TIM_PWM_Start+0x208>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_TIM_PWM_Start+0x14c>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_TIM_PWM_Start+0x14e>
 8001988:	2300      	movs	r3, #0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800199c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a23      	ldr	r2, [pc, #140]	@ (8001a30 <HAL_TIM_PWM_Start+0x1f4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d01d      	beq.n	80019e4 <HAL_TIM_PWM_Start+0x1a8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b0:	d018      	beq.n	80019e4 <HAL_TIM_PWM_Start+0x1a8>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a24      	ldr	r2, [pc, #144]	@ (8001a48 <HAL_TIM_PWM_Start+0x20c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d013      	beq.n	80019e4 <HAL_TIM_PWM_Start+0x1a8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a22      	ldr	r2, [pc, #136]	@ (8001a4c <HAL_TIM_PWM_Start+0x210>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00e      	beq.n	80019e4 <HAL_TIM_PWM_Start+0x1a8>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001a34 <HAL_TIM_PWM_Start+0x1f8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d009      	beq.n	80019e4 <HAL_TIM_PWM_Start+0x1a8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a18      	ldr	r2, [pc, #96]	@ (8001a38 <HAL_TIM_PWM_Start+0x1fc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d004      	beq.n	80019e4 <HAL_TIM_PWM_Start+0x1a8>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a19      	ldr	r2, [pc, #100]	@ (8001a44 <HAL_TIM_PWM_Start+0x208>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d115      	bne.n	8001a10 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_TIM_PWM_Start+0x214>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d015      	beq.n	8001a22 <HAL_TIM_PWM_Start+0x1e6>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019fc:	d011      	beq.n	8001a22 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a0e:	e008      	b.n	8001a22 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	e000      	b.n	8001a24 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40012c00 	.word	0x40012c00
 8001a34:	40013400 	.word	0x40013400
 8001a38:	40014000 	.word	0x40014000
 8001a3c:	40014400 	.word	0x40014400
 8001a40:	40014800 	.word	0x40014800
 8001a44:	40015000 	.word	0x40015000
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	40000800 	.word	0x40000800
 8001a50:	00010007 	.word	0x00010007

08001a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e0ff      	b.n	8001c72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b14      	cmp	r3, #20
 8001a7e:	f200 80f0 	bhi.w	8001c62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001a82:	a201      	add	r2, pc, #4	@ (adr r2, 8001a88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001add 	.word	0x08001add
 8001a8c:	08001c63 	.word	0x08001c63
 8001a90:	08001c63 	.word	0x08001c63
 8001a94:	08001c63 	.word	0x08001c63
 8001a98:	08001b1d 	.word	0x08001b1d
 8001a9c:	08001c63 	.word	0x08001c63
 8001aa0:	08001c63 	.word	0x08001c63
 8001aa4:	08001c63 	.word	0x08001c63
 8001aa8:	08001b5f 	.word	0x08001b5f
 8001aac:	08001c63 	.word	0x08001c63
 8001ab0:	08001c63 	.word	0x08001c63
 8001ab4:	08001c63 	.word	0x08001c63
 8001ab8:	08001b9f 	.word	0x08001b9f
 8001abc:	08001c63 	.word	0x08001c63
 8001ac0:	08001c63 	.word	0x08001c63
 8001ac4:	08001c63 	.word	0x08001c63
 8001ac8:	08001be1 	.word	0x08001be1
 8001acc:	08001c63 	.word	0x08001c63
 8001ad0:	08001c63 	.word	0x08001c63
 8001ad4:	08001c63 	.word	0x08001c63
 8001ad8:	08001c21 	.word	0x08001c21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f974 	bl	8001dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0208 	orr.w	r2, r2, #8
 8001af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0204 	bic.w	r2, r2, #4
 8001b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6999      	ldr	r1, [r3, #24]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	619a      	str	r2, [r3, #24]
      break;
 8001b1a:	e0a5      	b.n	8001c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f9ee 	bl	8001f04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699a      	ldr	r2, [r3, #24]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6999      	ldr	r1, [r3, #24]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	021a      	lsls	r2, r3, #8
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	619a      	str	r2, [r3, #24]
      break;
 8001b5c:	e084      	b.n	8001c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fa61 	bl	800202c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	69da      	ldr	r2, [r3, #28]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0208 	orr.w	r2, r2, #8
 8001b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69da      	ldr	r2, [r3, #28]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0204 	bic.w	r2, r2, #4
 8001b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	69d9      	ldr	r1, [r3, #28]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	61da      	str	r2, [r3, #28]
      break;
 8001b9c:	e064      	b.n	8001c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fad3 	bl	8002150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	69da      	ldr	r2, [r3, #28]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	69da      	ldr	r2, [r3, #28]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	69d9      	ldr	r1, [r3, #28]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	021a      	lsls	r2, r3, #8
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	61da      	str	r2, [r3, #28]
      break;
 8001bde:	e043      	b.n	8001c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fb46 	bl	8002278 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0208 	orr.w	r2, r2, #8
 8001bfa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0204 	bic.w	r2, r2, #4
 8001c0a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001c1e:	e023      	b.n	8001c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fb90 	bl	800234c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c4a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	021a      	lsls	r2, r3, #8
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001c60:	e002      	b.n	8001c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	75fb      	strb	r3, [r7, #23]
      break;
 8001c66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop

08001c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a48      	ldr	r2, [pc, #288]	@ (8001db0 <TIM_Base_SetConfig+0x134>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d013      	beq.n	8001cbc <TIM_Base_SetConfig+0x40>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c9a:	d00f      	beq.n	8001cbc <TIM_Base_SetConfig+0x40>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a45      	ldr	r2, [pc, #276]	@ (8001db4 <TIM_Base_SetConfig+0x138>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00b      	beq.n	8001cbc <TIM_Base_SetConfig+0x40>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a44      	ldr	r2, [pc, #272]	@ (8001db8 <TIM_Base_SetConfig+0x13c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d007      	beq.n	8001cbc <TIM_Base_SetConfig+0x40>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a43      	ldr	r2, [pc, #268]	@ (8001dbc <TIM_Base_SetConfig+0x140>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d003      	beq.n	8001cbc <TIM_Base_SetConfig+0x40>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a42      	ldr	r2, [pc, #264]	@ (8001dc0 <TIM_Base_SetConfig+0x144>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d108      	bne.n	8001cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a37      	ldr	r2, [pc, #220]	@ (8001db0 <TIM_Base_SetConfig+0x134>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01f      	beq.n	8001d16 <TIM_Base_SetConfig+0x9a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cdc:	d01b      	beq.n	8001d16 <TIM_Base_SetConfig+0x9a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a34      	ldr	r2, [pc, #208]	@ (8001db4 <TIM_Base_SetConfig+0x138>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d017      	beq.n	8001d16 <TIM_Base_SetConfig+0x9a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a33      	ldr	r2, [pc, #204]	@ (8001db8 <TIM_Base_SetConfig+0x13c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <TIM_Base_SetConfig+0x9a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a32      	ldr	r2, [pc, #200]	@ (8001dbc <TIM_Base_SetConfig+0x140>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00f      	beq.n	8001d16 <TIM_Base_SetConfig+0x9a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a32      	ldr	r2, [pc, #200]	@ (8001dc4 <TIM_Base_SetConfig+0x148>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00b      	beq.n	8001d16 <TIM_Base_SetConfig+0x9a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a31      	ldr	r2, [pc, #196]	@ (8001dc8 <TIM_Base_SetConfig+0x14c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d007      	beq.n	8001d16 <TIM_Base_SetConfig+0x9a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a30      	ldr	r2, [pc, #192]	@ (8001dcc <TIM_Base_SetConfig+0x150>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d003      	beq.n	8001d16 <TIM_Base_SetConfig+0x9a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a2b      	ldr	r2, [pc, #172]	@ (8001dc0 <TIM_Base_SetConfig+0x144>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d108      	bne.n	8001d28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a18      	ldr	r2, [pc, #96]	@ (8001db0 <TIM_Base_SetConfig+0x134>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d013      	beq.n	8001d7c <TIM_Base_SetConfig+0x100>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a19      	ldr	r2, [pc, #100]	@ (8001dbc <TIM_Base_SetConfig+0x140>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00f      	beq.n	8001d7c <TIM_Base_SetConfig+0x100>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a19      	ldr	r2, [pc, #100]	@ (8001dc4 <TIM_Base_SetConfig+0x148>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d00b      	beq.n	8001d7c <TIM_Base_SetConfig+0x100>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a18      	ldr	r2, [pc, #96]	@ (8001dc8 <TIM_Base_SetConfig+0x14c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d007      	beq.n	8001d7c <TIM_Base_SetConfig+0x100>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a17      	ldr	r2, [pc, #92]	@ (8001dcc <TIM_Base_SetConfig+0x150>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d003      	beq.n	8001d7c <TIM_Base_SetConfig+0x100>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <TIM_Base_SetConfig+0x144>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d103      	bne.n	8001d84 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d105      	bne.n	8001da2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f023 0201 	bic.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	611a      	str	r2, [r3, #16]
  }
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40012c00 	.word	0x40012c00
 8001db4:	40000400 	.word	0x40000400
 8001db8:	40000800 	.word	0x40000800
 8001dbc:	40013400 	.word	0x40013400
 8001dc0:	40015000 	.word	0x40015000
 8001dc4:	40014000 	.word	0x40014000
 8001dc8:	40014400 	.word	0x40014400
 8001dcc:	40014800 	.word	0x40014800

08001dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f023 0201 	bic.w	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f023 0303 	bic.w	r3, r3, #3
 8001e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f023 0302 	bic.w	r3, r3, #2
 8001e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a30      	ldr	r2, [pc, #192]	@ (8001eec <TIM_OC1_SetConfig+0x11c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d013      	beq.n	8001e58 <TIM_OC1_SetConfig+0x88>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef0 <TIM_OC1_SetConfig+0x120>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00f      	beq.n	8001e58 <TIM_OC1_SetConfig+0x88>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ef4 <TIM_OC1_SetConfig+0x124>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00b      	beq.n	8001e58 <TIM_OC1_SetConfig+0x88>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef8 <TIM_OC1_SetConfig+0x128>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d007      	beq.n	8001e58 <TIM_OC1_SetConfig+0x88>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8001efc <TIM_OC1_SetConfig+0x12c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d003      	beq.n	8001e58 <TIM_OC1_SetConfig+0x88>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a2b      	ldr	r2, [pc, #172]	@ (8001f00 <TIM_OC1_SetConfig+0x130>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d10c      	bne.n	8001e72 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f023 0308 	bic.w	r3, r3, #8
 8001e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a1d      	ldr	r2, [pc, #116]	@ (8001eec <TIM_OC1_SetConfig+0x11c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <TIM_OC1_SetConfig+0xd2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef0 <TIM_OC1_SetConfig+0x120>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00f      	beq.n	8001ea2 <TIM_OC1_SetConfig+0xd2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef4 <TIM_OC1_SetConfig+0x124>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00b      	beq.n	8001ea2 <TIM_OC1_SetConfig+0xd2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef8 <TIM_OC1_SetConfig+0x128>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <TIM_OC1_SetConfig+0xd2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a19      	ldr	r2, [pc, #100]	@ (8001efc <TIM_OC1_SetConfig+0x12c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <TIM_OC1_SetConfig+0xd2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a18      	ldr	r2, [pc, #96]	@ (8001f00 <TIM_OC1_SetConfig+0x130>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d111      	bne.n	8001ec6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	621a      	str	r2, [r3, #32]
}
 8001ee0:	bf00      	nop
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	40012c00 	.word	0x40012c00
 8001ef0:	40013400 	.word	0x40013400
 8001ef4:	40014000 	.word	0x40014000
 8001ef8:	40014400 	.word	0x40014400
 8001efc:	40014800 	.word	0x40014800
 8001f00:	40015000 	.word	0x40015000

08001f04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f023 0210 	bic.w	r2, r3, #16
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f023 0320 	bic.w	r3, r3, #32
 8001f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a2c      	ldr	r2, [pc, #176]	@ (8002014 <TIM_OC2_SetConfig+0x110>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d007      	beq.n	8001f78 <TIM_OC2_SetConfig+0x74>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a2b      	ldr	r2, [pc, #172]	@ (8002018 <TIM_OC2_SetConfig+0x114>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d003      	beq.n	8001f78 <TIM_OC2_SetConfig+0x74>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a2a      	ldr	r2, [pc, #168]	@ (800201c <TIM_OC2_SetConfig+0x118>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d10d      	bne.n	8001f94 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a1f      	ldr	r2, [pc, #124]	@ (8002014 <TIM_OC2_SetConfig+0x110>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <TIM_OC2_SetConfig+0xc0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002018 <TIM_OC2_SetConfig+0x114>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00f      	beq.n	8001fc4 <TIM_OC2_SetConfig+0xc0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8002020 <TIM_OC2_SetConfig+0x11c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00b      	beq.n	8001fc4 <TIM_OC2_SetConfig+0xc0>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a1d      	ldr	r2, [pc, #116]	@ (8002024 <TIM_OC2_SetConfig+0x120>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <TIM_OC2_SetConfig+0xc0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002028 <TIM_OC2_SetConfig+0x124>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d003      	beq.n	8001fc4 <TIM_OC2_SetConfig+0xc0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a17      	ldr	r2, [pc, #92]	@ (800201c <TIM_OC2_SetConfig+0x118>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d113      	bne.n	8001fec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001fca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	621a      	str	r2, [r3, #32]
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40012c00 	.word	0x40012c00
 8002018:	40013400 	.word	0x40013400
 800201c:	40015000 	.word	0x40015000
 8002020:	40014000 	.word	0x40014000
 8002024:	40014400 	.word	0x40014400
 8002028:	40014800 	.word	0x40014800

0800202c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800205a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800205e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0303 	bic.w	r3, r3, #3
 8002066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2b      	ldr	r2, [pc, #172]	@ (8002138 <TIM_OC3_SetConfig+0x10c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <TIM_OC3_SetConfig+0x72>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a2a      	ldr	r2, [pc, #168]	@ (800213c <TIM_OC3_SetConfig+0x110>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_OC3_SetConfig+0x72>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a29      	ldr	r2, [pc, #164]	@ (8002140 <TIM_OC3_SetConfig+0x114>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10d      	bne.n	80020ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80020a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80020b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002138 <TIM_OC3_SetConfig+0x10c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <TIM_OC3_SetConfig+0xbe>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a1d      	ldr	r2, [pc, #116]	@ (800213c <TIM_OC3_SetConfig+0x110>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00f      	beq.n	80020ea <TIM_OC3_SetConfig+0xbe>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002144 <TIM_OC3_SetConfig+0x118>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00b      	beq.n	80020ea <TIM_OC3_SetConfig+0xbe>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002148 <TIM_OC3_SetConfig+0x11c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <TIM_OC3_SetConfig+0xbe>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a1b      	ldr	r2, [pc, #108]	@ (800214c <TIM_OC3_SetConfig+0x120>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d003      	beq.n	80020ea <TIM_OC3_SetConfig+0xbe>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a16      	ldr	r2, [pc, #88]	@ (8002140 <TIM_OC3_SetConfig+0x114>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d113      	bne.n	8002112 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80020f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	621a      	str	r2, [r3, #32]
}
 800212c:	bf00      	nop
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40012c00 	.word	0x40012c00
 800213c:	40013400 	.word	0x40013400
 8002140:	40015000 	.word	0x40015000
 8002144:	40014000 	.word	0x40014000
 8002148:	40014400 	.word	0x40014400
 800214c:	40014800 	.word	0x40014800

08002150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800217e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800218a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800219e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	031b      	lsls	r3, r3, #12
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002260 <TIM_OC4_SetConfig+0x110>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d007      	beq.n	80021c4 <TIM_OC4_SetConfig+0x74>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002264 <TIM_OC4_SetConfig+0x114>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d003      	beq.n	80021c4 <TIM_OC4_SetConfig+0x74>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a2a      	ldr	r2, [pc, #168]	@ (8002268 <TIM_OC4_SetConfig+0x118>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d10d      	bne.n	80021e0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80021ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	031b      	lsls	r3, r3, #12
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002260 <TIM_OC4_SetConfig+0x110>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d013      	beq.n	8002210 <TIM_OC4_SetConfig+0xc0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002264 <TIM_OC4_SetConfig+0x114>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00f      	beq.n	8002210 <TIM_OC4_SetConfig+0xc0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a1e      	ldr	r2, [pc, #120]	@ (800226c <TIM_OC4_SetConfig+0x11c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d00b      	beq.n	8002210 <TIM_OC4_SetConfig+0xc0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002270 <TIM_OC4_SetConfig+0x120>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d007      	beq.n	8002210 <TIM_OC4_SetConfig+0xc0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a1c      	ldr	r2, [pc, #112]	@ (8002274 <TIM_OC4_SetConfig+0x124>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d003      	beq.n	8002210 <TIM_OC4_SetConfig+0xc0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a17      	ldr	r2, [pc, #92]	@ (8002268 <TIM_OC4_SetConfig+0x118>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d113      	bne.n	8002238 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002216:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800221e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	019b      	lsls	r3, r3, #6
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	019b      	lsls	r3, r3, #6
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	621a      	str	r2, [r3, #32]
}
 8002252:	bf00      	nop
 8002254:	371c      	adds	r7, #28
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40013400 	.word	0x40013400
 8002268:	40015000 	.word	0x40015000
 800226c:	40014000 	.word	0x40014000
 8002270:	40014400 	.word	0x40014400
 8002274:	40014800 	.word	0x40014800

08002278 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800229e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80022bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a19      	ldr	r2, [pc, #100]	@ (8002334 <TIM_OC5_SetConfig+0xbc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <TIM_OC5_SetConfig+0x82>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a18      	ldr	r2, [pc, #96]	@ (8002338 <TIM_OC5_SetConfig+0xc0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00f      	beq.n	80022fa <TIM_OC5_SetConfig+0x82>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a17      	ldr	r2, [pc, #92]	@ (800233c <TIM_OC5_SetConfig+0xc4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00b      	beq.n	80022fa <TIM_OC5_SetConfig+0x82>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a16      	ldr	r2, [pc, #88]	@ (8002340 <TIM_OC5_SetConfig+0xc8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d007      	beq.n	80022fa <TIM_OC5_SetConfig+0x82>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a15      	ldr	r2, [pc, #84]	@ (8002344 <TIM_OC5_SetConfig+0xcc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d003      	beq.n	80022fa <TIM_OC5_SetConfig+0x82>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a14      	ldr	r2, [pc, #80]	@ (8002348 <TIM_OC5_SetConfig+0xd0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d109      	bne.n	800230e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002300:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	621a      	str	r2, [r3, #32]
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40012c00 	.word	0x40012c00
 8002338:	40013400 	.word	0x40013400
 800233c:	40014000 	.word	0x40014000
 8002340:	40014400 	.word	0x40014400
 8002344:	40014800 	.word	0x40014800
 8002348:	40015000 	.word	0x40015000

0800234c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800237a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800237e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	051b      	lsls	r3, r3, #20
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a1a      	ldr	r2, [pc, #104]	@ (800240c <TIM_OC6_SetConfig+0xc0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d013      	beq.n	80023d0 <TIM_OC6_SetConfig+0x84>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a19      	ldr	r2, [pc, #100]	@ (8002410 <TIM_OC6_SetConfig+0xc4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00f      	beq.n	80023d0 <TIM_OC6_SetConfig+0x84>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a18      	ldr	r2, [pc, #96]	@ (8002414 <TIM_OC6_SetConfig+0xc8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d00b      	beq.n	80023d0 <TIM_OC6_SetConfig+0x84>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a17      	ldr	r2, [pc, #92]	@ (8002418 <TIM_OC6_SetConfig+0xcc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d007      	beq.n	80023d0 <TIM_OC6_SetConfig+0x84>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a16      	ldr	r2, [pc, #88]	@ (800241c <TIM_OC6_SetConfig+0xd0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d003      	beq.n	80023d0 <TIM_OC6_SetConfig+0x84>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a15      	ldr	r2, [pc, #84]	@ (8002420 <TIM_OC6_SetConfig+0xd4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d109      	bne.n	80023e4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	029b      	lsls	r3, r3, #10
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	621a      	str	r2, [r3, #32]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40012c00 	.word	0x40012c00
 8002410:	40013400 	.word	0x40013400
 8002414:	40014000 	.word	0x40014000
 8002418:	40014400 	.word	0x40014400
 800241c:	40014800 	.word	0x40014800
 8002420:	40015000 	.word	0x40015000

08002424 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2201      	movs	r2, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a1a      	ldr	r2, [r3, #32]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	43db      	mvns	r3, r3
 8002446:	401a      	ands	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	431a      	orrs	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	621a      	str	r2, [r3, #32]
}
 8002462:	bf00      	nop
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002484:	2302      	movs	r3, #2
 8002486:	e06f      	b.n	8002568 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a31      	ldr	r2, [pc, #196]	@ (8002574 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a30      	ldr	r2, [pc, #192]	@ (8002578 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2e      	ldr	r2, [pc, #184]	@ (800257c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d108      	bne.n	80024d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80024cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80024de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002574 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d01d      	beq.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002508:	d018      	beq.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1c      	ldr	r2, [pc, #112]	@ (8002580 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d013      	beq.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1a      	ldr	r2, [pc, #104]	@ (8002584 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00e      	beq.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a15      	ldr	r2, [pc, #84]	@ (8002578 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d009      	beq.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a16      	ldr	r2, [pc, #88]	@ (8002588 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a11      	ldr	r2, [pc, #68]	@ (800257c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d10c      	bne.n	8002556 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	4313      	orrs	r3, r2
 800254c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40013400 	.word	0x40013400
 800257c:	40015000 	.word	0x40015000
 8002580:	40000400 	.word	0x40000400
 8002584:	40000800 	.word	0x40000800
 8002588:	40014000 	.word	0x40014000

0800258c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e078      	b.n	800269a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1c      	ldr	r2, [pc, #112]	@ (80026a8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d009      	beq.n	800264e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1b      	ldr	r2, [pc, #108]	@ (80026ac <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d004      	beq.n	800264e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a19      	ldr	r2, [pc, #100]	@ (80026b0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d11c      	bne.n	8002688 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	051b      	lsls	r3, r3, #20
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002684:	4313      	orrs	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40012c00 	.word	0x40012c00
 80026ac:	40013400 	.word	0x40013400
 80026b0:	40015000 	.word	0x40015000

080026b4 <memset>:
 80026b4:	4402      	add	r2, r0
 80026b6:	4603      	mov	r3, r0
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d100      	bne.n	80026be <memset+0xa>
 80026bc:	4770      	bx	lr
 80026be:	f803 1b01 	strb.w	r1, [r3], #1
 80026c2:	e7f9      	b.n	80026b8 <memset+0x4>

080026c4 <__libc_init_array>:
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	4d0d      	ldr	r5, [pc, #52]	@ (80026fc <__libc_init_array+0x38>)
 80026c8:	4c0d      	ldr	r4, [pc, #52]	@ (8002700 <__libc_init_array+0x3c>)
 80026ca:	1b64      	subs	r4, r4, r5
 80026cc:	10a4      	asrs	r4, r4, #2
 80026ce:	2600      	movs	r6, #0
 80026d0:	42a6      	cmp	r6, r4
 80026d2:	d109      	bne.n	80026e8 <__libc_init_array+0x24>
 80026d4:	4d0b      	ldr	r5, [pc, #44]	@ (8002704 <__libc_init_array+0x40>)
 80026d6:	4c0c      	ldr	r4, [pc, #48]	@ (8002708 <__libc_init_array+0x44>)
 80026d8:	f000 f818 	bl	800270c <_init>
 80026dc:	1b64      	subs	r4, r4, r5
 80026de:	10a4      	asrs	r4, r4, #2
 80026e0:	2600      	movs	r6, #0
 80026e2:	42a6      	cmp	r6, r4
 80026e4:	d105      	bne.n	80026f2 <__libc_init_array+0x2e>
 80026e6:	bd70      	pop	{r4, r5, r6, pc}
 80026e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ec:	4798      	blx	r3
 80026ee:	3601      	adds	r6, #1
 80026f0:	e7ee      	b.n	80026d0 <__libc_init_array+0xc>
 80026f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f6:	4798      	blx	r3
 80026f8:	3601      	adds	r6, #1
 80026fa:	e7f2      	b.n	80026e2 <__libc_init_array+0x1e>
 80026fc:	08002734 	.word	0x08002734
 8002700:	08002734 	.word	0x08002734
 8002704:	08002734 	.word	0x08002734
 8002708:	08002738 	.word	0x08002738

0800270c <_init>:
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270e:	bf00      	nop
 8002710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002712:	bc08      	pop	{r3}
 8002714:	469e      	mov	lr, r3
 8002716:	4770      	bx	lr

08002718 <_fini>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	bf00      	nop
 800271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271e:	bc08      	pop	{r3}
 8002720:	469e      	mov	lr, r3
 8002722:	4770      	bx	lr
